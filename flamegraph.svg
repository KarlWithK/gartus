<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="99238"><g><title>ReadBlobByte (521 samples, 0.53%)</title><rect x="0.0796%" y="549" width="0.5250%" height="15" fill="rgb(227,0,7)" fg:x="79" fg:w="521"/><text x="0.3296%" y="559.50"></text></g><g><title>ReadBlobStream (545 samples, 0.55%)</title><rect x="0.6046%" y="549" width="0.5492%" height="15" fill="rgb(217,0,24)" fg:x="600" fg:w="545"/><text x="0.8546%" y="559.50"></text></g><g><title>[[heap]] (1,123 samples, 1.13%)</title><rect x="0.0484%" y="565" width="1.1316%" height="15" fill="rgb(221,193,54)" fg:x="48" fg:w="1123"/><text x="0.2984%" y="575.50"></text></g><g><title>do_lookup_x (20 samples, 0.02%)</title><rect x="1.1931%" y="549" width="0.0202%" height="15" fill="rgb(248,212,6)" fg:x="1184" fg:w="20"/><text x="1.4431%" y="559.50"></text></g><g><title>[[stack]] (39 samples, 0.04%)</title><rect x="1.1800%" y="565" width="0.0393%" height="15" fill="rgb(208,68,35)" fg:x="1171" fg:w="39"/><text x="1.4300%" y="575.50"></text></g><g><title>[anon] (20 samples, 0.02%)</title><rect x="1.2203%" y="565" width="0.0202%" height="15" fill="rgb(232,128,0)" fg:x="1211" fg:w="20"/><text x="1.4703%" y="575.50"></text></g><g><title>EOFBlob (53 samples, 0.05%)</title><rect x="1.5508%" y="549" width="0.0534%" height="15" fill="rgb(207,160,47)" fg:x="1539" fg:w="53"/><text x="1.8008%" y="559.50"></text></g><g><title>OpenBlob (11 samples, 0.01%)</title><rect x="1.6355%" y="549" width="0.0111%" height="15" fill="rgb(228,23,34)" fg:x="1623" fg:w="11"/><text x="1.8855%" y="559.50"></text></g><g><title>ReadBlobByte (342 samples, 0.34%)</title><rect x="1.6516%" y="549" width="0.3446%" height="15" fill="rgb(218,30,26)" fg:x="1639" fg:w="342"/><text x="1.9016%" y="559.50"></text></g><g><title>ReadBlobStream (494 samples, 0.50%)</title><rect x="1.9962%" y="549" width="0.4978%" height="15" fill="rgb(220,122,19)" fg:x="1981" fg:w="494"/><text x="2.2462%" y="559.50"></text></g><g><title>ReadImage (15 samples, 0.02%)</title><rect x="2.4940%" y="549" width="0.0151%" height="15" fill="rgb(250,228,42)" fg:x="2475" fg:w="15"/><text x="2.7440%" y="559.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (17 samples, 0.02%)</title><rect x="2.5565%" y="469" width="0.0171%" height="15" fill="rgb(240,193,28)" fg:x="2537" fg:w="17"/><text x="2.8065%" y="479.50"></text></g><g><title>AcquireRandomInfo (26 samples, 0.03%)</title><rect x="2.5484%" y="501" width="0.0262%" height="15" fill="rgb(216,20,37)" fg:x="2529" fg:w="26"/><text x="2.7984%" y="511.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (26 samples, 0.03%)</title><rect x="2.5484%" y="485" width="0.0262%" height="15" fill="rgb(206,188,39)" fg:x="2529" fg:w="26"/><text x="2.7984%" y="495.50"></text></g><g><title>AcquireUniqueFileResource (31 samples, 0.03%)</title><rect x="2.5474%" y="517" width="0.0312%" height="15" fill="rgb(217,207,13)" fg:x="2528" fg:w="31"/><text x="2.7974%" y="527.50"></text></g><g><title>__GI__IO_file_read (12 samples, 0.01%)</title><rect x="2.6935%" y="453" width="0.0121%" height="15" fill="rgb(231,73,38)" fg:x="2673" fg:w="12"/><text x="2.9435%" y="463.50"></text></g><g><title>__GI__IO_file_underflow (181 samples, 0.18%)</title><rect x="2.7056%" y="453" width="0.1824%" height="15" fill="rgb(225,20,46)" fg:x="2685" fg:w="181"/><text x="2.9556%" y="463.50"></text></g><g><title>__GI___read (167 samples, 0.17%)</title><rect x="2.7197%" y="437" width="0.1683%" height="15" fill="rgb(210,31,41)" fg:x="2699" fg:w="167"/><text x="2.9697%" y="447.50"></text></g><g><title>__GI___read (1,578 samples, 1.59%)</title><rect x="2.8880%" y="453" width="1.5901%" height="15" fill="rgb(221,200,47)" fg:x="2866" fg:w="1578"/><text x="3.1380%" y="463.50"></text></g><g><title>_IO_file_xsgetn (1,877 samples, 1.89%)</title><rect x="2.6179%" y="469" width="1.8914%" height="15" fill="rgb(226,26,5)" fg:x="2598" fg:w="1877"/><text x="2.8679%" y="479.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (23 samples, 0.02%)</title><rect x="4.4862%" y="453" width="0.0232%" height="15" fill="rgb(249,33,26)" fg:x="4452" fg:w="23"/><text x="4.7362%" y="463.50"></text></g><g><title>ReadBlobStream (1,918 samples, 1.93%)</title><rect x="2.5797%" y="517" width="1.9327%" height="15" fill="rgb(235,183,28)" fg:x="2560" fg:w="1918"/><text x="2.8297%" y="527.50">R..</text></g><g><title>ReadBlob (1,908 samples, 1.92%)</title><rect x="2.5897%" y="501" width="1.9227%" height="15" fill="rgb(221,5,38)" fg:x="2570" fg:w="1908"/><text x="2.8397%" y="511.50">R..</text></g><g><title>__GI__IO_fread (1,889 samples, 1.90%)</title><rect x="2.6089%" y="485" width="1.9035%" height="15" fill="rgb(247,18,42)" fg:x="2589" fg:w="1889"/><text x="2.8589%" y="495.50">_..</text></g><g><title>ImageToFile (1,962 samples, 1.98%)</title><rect x="2.5383%" y="533" width="1.9771%" height="15" fill="rgb(241,131,45)" fg:x="2519" fg:w="1962"/><text x="2.7883%" y="543.50">I..</text></g><g><title>SetImageInfo (1,987 samples, 2.00%)</title><rect x="2.5142%" y="549" width="2.0023%" height="15" fill="rgb(249,31,29)" fg:x="2495" fg:w="1987"/><text x="2.7642%" y="559.50">S..</text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (32 samples, 0.03%)</title><rect x="4.6041%" y="501" width="0.0322%" height="15" fill="rgb(225,111,53)" fg:x="4569" fg:w="32"/><text x="4.8541%" y="511.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (32 samples, 0.03%)</title><rect x="4.6041%" y="485" width="0.0322%" height="15" fill="rgb(238,160,17)" fg:x="4569" fg:w="32"/><text x="4.8541%" y="495.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (31 samples, 0.03%)</title><rect x="4.6051%" y="469" width="0.0312%" height="15" fill="rgb(214,148,48)" fg:x="4570" fg:w="31"/><text x="4.8551%" y="479.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (28 samples, 0.03%)</title><rect x="4.6081%" y="453" width="0.0282%" height="15" fill="rgb(232,36,49)" fg:x="4573" fg:w="28"/><text x="4.8581%" y="463.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (25 samples, 0.03%)</title><rect x="4.6111%" y="437" width="0.0252%" height="15" fill="rgb(209,103,24)" fg:x="4576" fg:w="25"/><text x="4.8611%" y="447.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (22 samples, 0.02%)</title><rect x="4.6142%" y="421" width="0.0222%" height="15" fill="rgb(229,88,8)" fg:x="4579" fg:w="22"/><text x="4.8642%" y="431.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (19 samples, 0.02%)</title><rect x="4.6172%" y="405" width="0.0191%" height="15" fill="rgb(213,181,19)" fg:x="4582" fg:w="19"/><text x="4.8672%" y="415.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (17 samples, 0.02%)</title><rect x="4.6192%" y="389" width="0.0171%" height="15" fill="rgb(254,191,54)" fg:x="4584" fg:w="17"/><text x="4.8692%" y="399.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (15 samples, 0.02%)</title><rect x="4.6212%" y="373" width="0.0151%" height="15" fill="rgb(241,83,37)" fg:x="4586" fg:w="15"/><text x="4.8712%" y="383.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (12 samples, 0.01%)</title><rect x="4.6242%" y="357" width="0.0121%" height="15" fill="rgb(233,36,39)" fg:x="4589" fg:w="12"/><text x="4.8742%" y="367.50"></text></g><g><title>AddValueToSplayTree (42 samples, 0.04%)</title><rect x="4.6001%" y="517" width="0.0423%" height="15" fill="rgb(226,3,54)" fg:x="4565" fg:w="42"/><text x="4.8501%" y="527.50"></text></g><g><title>GetCoderInfo (54 samples, 0.05%)</title><rect x="4.5970%" y="533" width="0.0544%" height="15" fill="rgb(245,192,40)" fg:x="4562" fg:w="54"/><text x="4.8470%" y="543.50"></text></g><g><title>GetNextToken (21 samples, 0.02%)</title><rect x="4.6514%" y="533" width="0.0212%" height="15" fill="rgb(238,167,29)" fg:x="4616" fg:w="21"/><text x="4.9014%" y="543.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (517 samples, 0.52%)</title><rect x="4.7008%" y="501" width="0.5210%" height="15" fill="rgb(232,182,51)" fg:x="4665" fg:w="517"/><text x="4.9508%" y="511.50"></text></g><g><title>do_wait (644 samples, 0.65%)</title><rect x="5.2258%" y="453" width="0.6489%" height="15" fill="rgb(231,60,39)" fg:x="5186" fg:w="644"/><text x="5.4758%" y="463.50"></text></g><g><title>do_spin (644 samples, 0.65%)</title><rect x="5.2258%" y="437" width="0.6489%" height="15" fill="rgb(208,69,12)" fg:x="5186" fg:w="644"/><text x="5.4758%" y="447.50"></text></g><g><title>cpu_relax (534 samples, 0.54%)</title><rect x="5.3367%" y="421" width="0.5381%" height="15" fill="rgb(235,93,37)" fg:x="5296" fg:w="534"/><text x="5.5867%" y="431.50"></text></g><g><title>GOMP_parallel (1,170 samples, 1.18%)</title><rect x="4.7008%" y="517" width="1.1790%" height="15" fill="rgb(213,116,39)" fg:x="4665" fg:w="1170"/><text x="4.9508%" y="527.50"></text></g><g><title>gomp_team_start (653 samples, 0.66%)</title><rect x="5.2218%" y="501" width="0.6580%" height="15" fill="rgb(222,207,29)" fg:x="5182" fg:w="653"/><text x="5.4718%" y="511.50"></text></g><g><title>gomp_simple_barrier_wait (651 samples, 0.66%)</title><rect x="5.2238%" y="485" width="0.6560%" height="15" fill="rgb(206,96,30)" fg:x="5184" fg:w="651"/><text x="5.4738%" y="495.50"></text></g><g><title>gomp_barrier_wait_end (649 samples, 0.65%)</title><rect x="5.2258%" y="469" width="0.6540%" height="15" fill="rgb(218,138,4)" fg:x="5186" fg:w="649"/><text x="5.4758%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (605 samples, 0.61%)</title><rect x="5.8919%" y="517" width="0.6096%" height="15" fill="rgb(250,191,14)" fg:x="5847" fg:w="605"/><text x="6.1419%" y="527.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (1,850 samples, 1.86%)</title><rect x="4.6968%" y="533" width="1.8642%" height="15" fill="rgb(239,60,40)" fg:x="4661" fg:w="1850"/><text x="4.9468%" y="543.50">[..</text></g><g><title>gomp_team_end (58 samples, 0.06%)</title><rect x="6.5025%" y="517" width="0.0584%" height="15" fill="rgb(206,27,48)" fg:x="6453" fg:w="58"/><text x="6.7525%" y="527.50"></text></g><g><title>gomp_team_barrier_wait_end (58 samples, 0.06%)</title><rect x="6.5025%" y="501" width="0.0584%" height="15" fill="rgb(225,35,8)" fg:x="6453" fg:w="58"/><text x="6.7525%" y="511.50"></text></g><g><title>do_wait (58 samples, 0.06%)</title><rect x="6.5025%" y="485" width="0.0584%" height="15" fill="rgb(250,213,24)" fg:x="6453" fg:w="58"/><text x="6.7525%" y="495.50"></text></g><g><title>do_spin (58 samples, 0.06%)</title><rect x="6.5025%" y="469" width="0.0584%" height="15" fill="rgb(247,123,22)" fg:x="6453" fg:w="58"/><text x="6.7525%" y="479.50"></text></g><g><title>cpu_relax (58 samples, 0.06%)</title><rect x="6.5025%" y="453" width="0.0584%" height="15" fill="rgb(231,138,38)" fg:x="6453" fg:w="58"/><text x="6.7525%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (23 samples, 0.02%)</title><rect x="6.5610%" y="533" width="0.0232%" height="15" fill="rgb(231,145,46)" fg:x="6511" fg:w="23"/><text x="6.8110%" y="543.50"></text></g><g><title>_dl_map_object_from_fd (10 samples, 0.01%)</title><rect x="6.6043%" y="309" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="6554" fg:w="10"/><text x="6.8543%" y="319.50"></text></g><g><title>_dl_map_object (19 samples, 0.02%)</title><rect x="6.6023%" y="325" width="0.0191%" height="15" fill="rgb(217,147,25)" fg:x="6552" fg:w="19"/><text x="6.8523%" y="335.50"></text></g><g><title>_dl_name_match_p (32 samples, 0.03%)</title><rect x="6.6366%" y="261" width="0.0322%" height="15" fill="rgb(247,81,37)" fg:x="6586" fg:w="32"/><text x="6.8866%" y="271.50"></text></g><g><title>strcmp (25 samples, 0.03%)</title><rect x="6.6436%" y="245" width="0.0252%" height="15" fill="rgb(209,12,38)" fg:x="6593" fg:w="25"/><text x="6.8936%" y="255.50"></text></g><g><title>__GI__dl_catch_exception (67 samples, 0.07%)</title><rect x="6.6255%" y="309" width="0.0675%" height="15" fill="rgb(227,1,9)" fg:x="6575" fg:w="67"/><text x="6.8755%" y="319.50"></text></g><g><title>openaux (65 samples, 0.07%)</title><rect x="6.6275%" y="293" width="0.0655%" height="15" fill="rgb(248,47,43)" fg:x="6577" fg:w="65"/><text x="6.8775%" y="303.50"></text></g><g><title>_dl_map_object (65 samples, 0.07%)</title><rect x="6.6275%" y="277" width="0.0655%" height="15" fill="rgb(221,10,30)" fg:x="6577" fg:w="65"/><text x="6.8775%" y="287.50"></text></g><g><title>strcmp (24 samples, 0.02%)</title><rect x="6.6688%" y="261" width="0.0242%" height="15" fill="rgb(210,229,1)" fg:x="6618" fg:w="24"/><text x="6.9188%" y="271.50"></text></g><g><title>_dl_map_object_deps (83 samples, 0.08%)</title><rect x="6.6215%" y="325" width="0.0836%" height="15" fill="rgb(222,148,37)" fg:x="6571" fg:w="83"/><text x="6.8715%" y="335.50"></text></g><g><title>_dl_sort_maps (11 samples, 0.01%)</title><rect x="6.6940%" y="309" width="0.0111%" height="15" fill="rgb(234,67,33)" fg:x="6643" fg:w="11"/><text x="6.9440%" y="319.50"></text></g><g><title>_dl_lookup_symbol_x (26 samples, 0.03%)</title><rect x="6.7061%" y="309" width="0.0262%" height="15" fill="rgb(247,98,35)" fg:x="6655" fg:w="26"/><text x="6.9561%" y="319.50"></text></g><g><title>do_lookup_x (25 samples, 0.03%)</title><rect x="6.7071%" y="293" width="0.0252%" height="15" fill="rgb(247,138,52)" fg:x="6656" fg:w="25"/><text x="6.9571%" y="303.50"></text></g><g><title>__GI__dl_catch_error (136 samples, 0.14%)</title><rect x="6.5963%" y="421" width="0.1370%" height="15" fill="rgb(213,79,30)" fg:x="6546" fg:w="136"/><text x="6.8463%" y="431.50"></text></g><g><title>__GI__dl_catch_exception (136 samples, 0.14%)</title><rect x="6.5963%" y="405" width="0.1370%" height="15" fill="rgb(246,177,23)" fg:x="6546" fg:w="136"/><text x="6.8463%" y="415.50"></text></g><g><title>[libdl-2.33.so] (136 samples, 0.14%)</title><rect x="6.5963%" y="389" width="0.1370%" height="15" fill="rgb(230,62,27)" fg:x="6546" fg:w="136"/><text x="6.8463%" y="399.50"></text></g><g><title>_dl_open (136 samples, 0.14%)</title><rect x="6.5963%" y="373" width="0.1370%" height="15" fill="rgb(216,154,8)" fg:x="6546" fg:w="136"/><text x="6.8463%" y="383.50"></text></g><g><title>__GI__dl_catch_exception (135 samples, 0.14%)</title><rect x="6.5973%" y="357" width="0.1360%" height="15" fill="rgb(244,35,45)" fg:x="6547" fg:w="135"/><text x="6.8473%" y="367.50"></text></g><g><title>dl_open_worker (135 samples, 0.14%)</title><rect x="6.5973%" y="341" width="0.1360%" height="15" fill="rgb(251,115,12)" fg:x="6547" fg:w="135"/><text x="6.8473%" y="351.50"></text></g><g><title>_dl_relocate_object (28 samples, 0.03%)</title><rect x="6.7051%" y="325" width="0.0282%" height="15" fill="rgb(240,54,50)" fg:x="6654" fg:w="28"/><text x="6.9551%" y="335.50"></text></g><g><title>[libltdl.so.7.3.1] (140 samples, 0.14%)</title><rect x="6.5953%" y="485" width="0.1411%" height="15" fill="rgb(233,84,52)" fg:x="6545" fg:w="140"/><text x="6.8453%" y="495.50"></text></g><g><title>[libltdl.so.7.3.1] (140 samples, 0.14%)</title><rect x="6.5953%" y="469" width="0.1411%" height="15" fill="rgb(207,117,47)" fg:x="6545" fg:w="140"/><text x="6.8453%" y="479.50"></text></g><g><title>dlopen (140 samples, 0.14%)</title><rect x="6.5953%" y="453" width="0.1411%" height="15" fill="rgb(249,43,39)" fg:x="6545" fg:w="140"/><text x="6.8453%" y="463.50"></text></g><g><title>[libdl-2.33.so] (139 samples, 0.14%)</title><rect x="6.5963%" y="437" width="0.1401%" height="15" fill="rgb(209,38,44)" fg:x="6546" fg:w="139"/><text x="6.8463%" y="447.50"></text></g><g><title>[libltdl.so.7.3.1] (142 samples, 0.14%)</title><rect x="6.5953%" y="501" width="0.1431%" height="15" fill="rgb(236,212,23)" fg:x="6545" fg:w="142"/><text x="6.8453%" y="511.50"></text></g><g><title>[libltdl.so.7.3.1] (147 samples, 0.15%)</title><rect x="6.5953%" y="517" width="0.1481%" height="15" fill="rgb(242,79,21)" fg:x="6545" fg:w="147"/><text x="6.8453%" y="527.50"></text></g><g><title>lt_dlopenadvise (148 samples, 0.15%)</title><rect x="6.5953%" y="533" width="0.1491%" height="15" fill="rgb(211,96,35)" fg:x="6545" fg:w="148"/><text x="6.8453%" y="543.50"></text></g><g><title>dlerror (15 samples, 0.02%)</title><rect x="6.7444%" y="501" width="0.0151%" height="15" fill="rgb(253,215,40)" fg:x="6693" fg:w="15"/><text x="6.9944%" y="511.50"></text></g><g><title>__dcigettext (14 samples, 0.01%)</title><rect x="6.7454%" y="485" width="0.0141%" height="15" fill="rgb(211,81,21)" fg:x="6694" fg:w="14"/><text x="6.9954%" y="495.50"></text></g><g><title>_nl_find_domain (11 samples, 0.01%)</title><rect x="6.7484%" y="469" width="0.0111%" height="15" fill="rgb(208,190,38)" fg:x="6697" fg:w="11"/><text x="6.9984%" y="479.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (2,227 samples, 2.24%)</title><rect x="4.5194%" y="549" width="2.2441%" height="15" fill="rgb(235,213,38)" fg:x="4485" fg:w="2227"/><text x="4.7694%" y="559.50">[..</text></g><g><title>lt_dlsym (19 samples, 0.02%)</title><rect x="6.7444%" y="533" width="0.0191%" height="15" fill="rgb(237,122,38)" fg:x="6693" fg:w="19"/><text x="6.9944%" y="543.50"></text></g><g><title>[libltdl.so.7.3.1] (19 samples, 0.02%)</title><rect x="6.7444%" y="517" width="0.0191%" height="15" fill="rgb(244,218,35)" fg:x="6693" fg:w="19"/><text x="6.9944%" y="527.50"></text></g><g><title>AcquireQuantumInfo (22 samples, 0.02%)</title><rect x="8.6822%" y="533" width="0.0222%" height="15" fill="rgb(240,68,47)" fg:x="8616" fg:w="22"/><text x="8.9322%" y="543.50"></text></g><g><title>SetQuantumDepth (22 samples, 0.02%)</title><rect x="8.6822%" y="517" width="0.0222%" height="15" fill="rgb(210,16,53)" fg:x="8616" fg:w="22"/><text x="8.9322%" y="527.50"></text></g><g><title>__memset_avx2_erms (18 samples, 0.02%)</title><rect x="8.6862%" y="501" width="0.0181%" height="15" fill="rgb(235,124,12)" fg:x="8620" fg:w="18"/><text x="8.9362%" y="511.50"></text></g><g><title>ExportQuantumPixels (324 samples, 0.33%)</title><rect x="8.7074%" y="533" width="0.3265%" height="15" fill="rgb(224,169,11)" fg:x="8641" fg:w="324"/><text x="8.9574%" y="543.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (321 samples, 0.32%)</title><rect x="8.7104%" y="517" width="0.3235%" height="15" fill="rgb(250,166,2)" fg:x="8644" fg:w="321"/><text x="8.9604%" y="527.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (721 samples, 0.73%)</title><rect x="9.0419%" y="501" width="0.7265%" height="15" fill="rgb(242,216,29)" fg:x="8973" fg:w="721"/><text x="9.2919%" y="511.50"></text></g><g><title>GOMP_parallel (3,172 samples, 3.20%)</title><rect x="9.0409%" y="517" width="3.1964%" height="15" fill="rgb(230,116,27)" fg:x="8972" fg:w="3172"/><text x="9.2909%" y="527.50">GOM..</text></g><g><title>gomp_team_start (2,450 samples, 2.47%)</title><rect x="9.7684%" y="501" width="2.4688%" height="15" fill="rgb(228,99,48)" fg:x="9694" fg:w="2450"/><text x="10.0184%" y="511.50">go..</text></g><g><title>gomp_simple_barrier_wait (2,446 samples, 2.46%)</title><rect x="9.7725%" y="485" width="2.4648%" height="15" fill="rgb(253,11,6)" fg:x="9698" fg:w="2446"/><text x="10.0225%" y="495.50">go..</text></g><g><title>gomp_barrier_wait_end (2,443 samples, 2.46%)</title><rect x="9.7755%" y="469" width="2.4618%" height="15" fill="rgb(247,143,39)" fg:x="9701" fg:w="2443"/><text x="10.0255%" y="479.50">go..</text></g><g><title>do_wait (2,443 samples, 2.46%)</title><rect x="9.7755%" y="453" width="2.4618%" height="15" fill="rgb(236,97,10)" fg:x="9701" fg:w="2443"/><text x="10.0255%" y="463.50">do..</text></g><g><title>do_spin (2,443 samples, 2.46%)</title><rect x="9.7755%" y="437" width="2.4618%" height="15" fill="rgb(233,208,19)" fg:x="9701" fg:w="2443"/><text x="10.0255%" y="447.50">do..</text></g><g><title>cpu_relax (2,334 samples, 2.35%)</title><rect x="9.8853%" y="421" width="2.3519%" height="15" fill="rgb(216,164,2)" fg:x="9810" fg:w="2334"/><text x="10.1353%" y="431.50">c..</text></g><g><title>GetImageDepth (3,835 samples, 3.86%)</title><rect x="9.0409%" y="533" width="3.8644%" height="15" fill="rgb(220,129,5)" fg:x="8972" fg:w="3835"/><text x="9.2909%" y="543.50">GetI..</text></g><g><title>gomp_team_end (663 samples, 0.67%)</title><rect x="12.2372%" y="517" width="0.6681%" height="15" fill="rgb(242,17,10)" fg:x="12144" fg:w="663"/><text x="12.4872%" y="527.50"></text></g><g><title>gomp_team_barrier_wait_end (661 samples, 0.67%)</title><rect x="12.2393%" y="501" width="0.6661%" height="15" fill="rgb(242,107,0)" fg:x="12146" fg:w="661"/><text x="12.4893%" y="511.50"></text></g><g><title>do_wait (661 samples, 0.67%)</title><rect x="12.2393%" y="485" width="0.6661%" height="15" fill="rgb(251,28,31)" fg:x="12146" fg:w="661"/><text x="12.4893%" y="495.50"></text></g><g><title>do_spin (661 samples, 0.67%)</title><rect x="12.2393%" y="469" width="0.6661%" height="15" fill="rgb(233,223,10)" fg:x="12146" fg:w="661"/><text x="12.4893%" y="479.50"></text></g><g><title>cpu_relax (639 samples, 0.64%)</title><rect x="12.2614%" y="453" width="0.6439%" height="15" fill="rgb(215,21,27)" fg:x="12168" fg:w="639"/><text x="12.5114%" y="463.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (11 samples, 0.01%)</title><rect x="12.9094%" y="517" width="0.0111%" height="15" fill="rgb(232,23,21)" fg:x="12811" fg:w="11"/><text x="13.1594%" y="527.50"></text></g><g><title>GetVirtualPixels (17 samples, 0.02%)</title><rect x="12.9053%" y="533" width="0.0171%" height="15" fill="rgb(244,5,23)" fg:x="12807" fg:w="17"/><text x="13.1553%" y="543.50"></text></g><g><title>SetQuantumDepth (22 samples, 0.02%)</title><rect x="12.9225%" y="533" width="0.0222%" height="15" fill="rgb(226,81,46)" fg:x="12824" fg:w="22"/><text x="13.1725%" y="543.50"></text></g><g><title>__memset_avx2_erms (19 samples, 0.02%)</title><rect x="12.9255%" y="517" width="0.0191%" height="15" fill="rgb(247,70,30)" fg:x="12827" fg:w="19"/><text x="13.1755%" y="527.50"></text></g><g><title>[libpng16.so.16.37.0] (13 samples, 0.01%)</title><rect x="13.3437%" y="485" width="0.0131%" height="15" fill="rgb(212,68,19)" fg:x="13242" fg:w="13"/><text x="13.5937%" y="495.50"></text></g><g><title>[libz.so.1.2.11] (128 samples, 0.13%)</title><rect x="14.0974%" y="437" width="0.1290%" height="15" fill="rgb(240,187,13)" fg:x="13990" fg:w="128"/><text x="14.3474%" y="447.50"></text></g><g><title>adler32_z (30 samples, 0.03%)</title><rect x="14.1962%" y="421" width="0.0302%" height="15" fill="rgb(223,113,26)" fg:x="14088" fg:w="30"/><text x="14.4462%" y="431.50"></text></g><g><title>[libpng16.so.16.37.0] (1,263 samples, 1.27%)</title><rect x="12.9557%" y="517" width="1.2727%" height="15" fill="rgb(206,192,2)" fg:x="12857" fg:w="1263"/><text x="13.2057%" y="527.50"></text></g><g><title>[libpng16.so.16.37.0] (879 samples, 0.89%)</title><rect x="13.3427%" y="501" width="0.8857%" height="15" fill="rgb(241,108,4)" fg:x="13241" fg:w="879"/><text x="13.5927%" y="511.50"></text></g><g><title>deflate (865 samples, 0.87%)</title><rect x="13.3568%" y="485" width="0.8716%" height="15" fill="rgb(247,173,49)" fg:x="13255" fg:w="865"/><text x="13.6068%" y="495.50"></text></g><g><title>[libz.so.1.2.11] (862 samples, 0.87%)</title><rect x="13.3598%" y="469" width="0.8686%" height="15" fill="rgb(224,114,35)" fg:x="13258" fg:w="862"/><text x="13.6098%" y="479.50"></text></g><g><title>[libz.so.1.2.11] (706 samples, 0.71%)</title><rect x="13.5170%" y="453" width="0.7114%" height="15" fill="rgb(245,159,27)" fg:x="13414" fg:w="706"/><text x="13.7670%" y="463.50"></text></g><g><title>[png.so] (7,409 samples, 7.47%)</title><rect x="6.7716%" y="549" width="7.4659%" height="15" fill="rgb(245,172,44)" fg:x="6720" fg:w="7409"/><text x="7.0216%" y="559.50">[png.so]</text></g><g><title>png_write_row (1,274 samples, 1.28%)</title><rect x="12.9537%" y="533" width="1.2838%" height="15" fill="rgb(236,23,11)" fg:x="12855" fg:w="1274"/><text x="13.2037%" y="543.50"></text></g><g><title>EOFBlob (231 samples, 0.23%)</title><rect x="19.3756%" y="533" width="0.2328%" height="15" fill="rgb(205,117,38)" fg:x="19228" fg:w="231"/><text x="19.6256%" y="543.50"></text></g><g><title>ResetImagePixels (450 samples, 0.45%)</title><rect x="19.6114%" y="533" width="0.4535%" height="15" fill="rgb(237,72,25)" fg:x="19462" fg:w="450"/><text x="19.8614%" y="543.50"></text></g><g><title>__memset_avx2_erms (450 samples, 0.45%)</title><rect x="19.6114%" y="517" width="0.4535%" height="15" fill="rgb(244,70,9)" fg:x="19462" fg:w="450"/><text x="19.8614%" y="527.50"></text></g><g><title>ReadBlobByte (7,008 samples, 7.06%)</title><rect x="23.2683%" y="517" width="7.0618%" height="15" fill="rgb(217,125,39)" fg:x="23091" fg:w="7008"/><text x="23.5183%" y="527.50">ReadBlobB..</text></g><g><title>ReadBlobStream (3,517 samples, 3.54%)</title><rect x="26.7861%" y="501" width="3.5440%" height="15" fill="rgb(235,36,10)" fg:x="26582" fg:w="3517"/><text x="27.0361%" y="511.50">Read..</text></g><g><title>[pnm.so] (16,131 samples, 16.25%)</title><rect x="14.2375%" y="549" width="16.2549%" height="15" fill="rgb(251,123,47)" fg:x="14129" fg:w="16131"/><text x="14.4875%" y="559.50">[pnm.so]</text></g><g><title>[pnm.so] (10,341 samples, 10.42%)</title><rect x="20.0719%" y="533" width="10.4204%" height="15" fill="rgb(221,13,13)" fg:x="19919" fg:w="10341"/><text x="20.3219%" y="543.50">[pnm.so]</text></g><g><title>__ctype_b_loc (161 samples, 0.16%)</title><rect x="30.3301%" y="517" width="0.1622%" height="15" fill="rgb(238,131,9)" fg:x="30099" fg:w="161"/><text x="30.5801%" y="527.50"></text></g><g><title>__GI___read (51 samples, 0.05%)</title><rect x="30.4984%" y="549" width="0.0514%" height="15" fill="rgb(211,50,8)" fg:x="30266" fg:w="51"/><text x="30.7484%" y="559.50"></text></g><g><title>__ctype_b_loc (135 samples, 0.14%)</title><rect x="30.5538%" y="549" width="0.1360%" height="15" fill="rgb(245,182,24)" fg:x="30321" fg:w="135"/><text x="30.8038%" y="559.50"></text></g><g><title>[unknown] (29,231 samples, 29.46%)</title><rect x="1.2787%" y="565" width="29.4555%" height="15" fill="rgb(242,14,37)" fg:x="1269" fg:w="29231"/><text x="1.5287%" y="575.50">[unknown]</text></g><g><title>__GI___ctype_init (10 samples, 0.01%)</title><rect x="34.2510%" y="533" width="0.0101%" height="15" fill="rgb(246,228,12)" fg:x="33990" fg:w="10"/><text x="34.5010%" y="543.50"></text></g><g><title>__deallocate_stack (115 samples, 0.12%)</title><rect x="34.2701%" y="533" width="0.1159%" height="15" fill="rgb(213,55,15)" fg:x="34009" fg:w="115"/><text x="34.5201%" y="543.50"></text></g><g><title>free_stacks (108 samples, 0.11%)</title><rect x="34.2772%" y="517" width="0.1088%" height="15" fill="rgb(209,9,3)" fg:x="34016" fg:w="108"/><text x="34.5272%" y="527.50"></text></g><g><title>__GI__dl_deallocate_tls (105 samples, 0.11%)</title><rect x="34.2802%" y="501" width="0.1058%" height="15" fill="rgb(230,59,30)" fg:x="34019" fg:w="105"/><text x="34.5302%" y="511.50"></text></g><g><title>__GI___libc_free (82 samples, 0.08%)</title><rect x="34.3034%" y="485" width="0.0826%" height="15" fill="rgb(209,121,21)" fg:x="34042" fg:w="82"/><text x="34.5534%" y="495.50"></text></g><g><title>tcache_init.part.0 (78 samples, 0.08%)</title><rect x="34.3074%" y="469" width="0.0786%" height="15" fill="rgb(220,109,13)" fg:x="34046" fg:w="78"/><text x="34.5574%" y="479.50"></text></g><g><title>arena_get2.part.0 (74 samples, 0.07%)</title><rect x="34.3115%" y="453" width="0.0746%" height="15" fill="rgb(232,18,1)" fg:x="34050" fg:w="74"/><text x="34.5615%" y="463.50"></text></g><g><title>new_heap (56 samples, 0.06%)</title><rect x="34.3296%" y="437" width="0.0564%" height="15" fill="rgb(215,41,42)" fg:x="34068" fg:w="56"/><text x="34.5796%" y="447.50"></text></g><g><title>__GI_munmap (34 samples, 0.03%)</title><rect x="34.3518%" y="421" width="0.0343%" height="15" fill="rgb(224,123,36)" fg:x="34090" fg:w="34"/><text x="34.6018%" y="431.50"></text></g><g><title>__res_thread_freeres (60 samples, 0.06%)</title><rect x="34.3860%" y="517" width="0.0605%" height="15" fill="rgb(240,125,3)" fg:x="34124" fg:w="60"/><text x="34.6360%" y="527.50"></text></g><g><title>__libc_thread_freeres (309 samples, 0.31%)</title><rect x="34.3860%" y="533" width="0.3114%" height="15" fill="rgb(205,98,50)" fg:x="34124" fg:w="309"/><text x="34.6360%" y="543.50"></text></g><g><title>__rpc_thread_destroy (249 samples, 0.25%)</title><rect x="34.4465%" y="517" width="0.2509%" height="15" fill="rgb(205,185,37)" fg:x="34184" fg:w="249"/><text x="34.6965%" y="527.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (14 samples, 0.01%)</title><rect x="40.5389%" y="485" width="0.0141%" height="15" fill="rgb(238,207,15)" fg:x="40230" fg:w="14"/><text x="40.7889%" y="495.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (10 samples, 0.01%)</title><rect x="40.5429%" y="469" width="0.0101%" height="15" fill="rgb(213,199,42)" fg:x="40234" fg:w="10"/><text x="40.7929%" y="479.50"></text></g><g><title>GetCacheViewVirtualPixels (17 samples, 0.02%)</title><rect x="40.5369%" y="501" width="0.0171%" height="15" fill="rgb(235,201,11)" fg:x="40228" fg:w="17"/><text x="40.7869%" y="511.50"></text></g><g><title>[libMagickCore-7.Q16HDRI.so.10.0.0] (5,807 samples, 5.85%)</title><rect x="34.7095%" y="517" width="5.8516%" height="15" fill="rgb(207,46,11)" fg:x="34445" fg:w="5807"/><text x="34.9595%" y="527.50">[libMag..</text></g><g><title>do_spin (30,512 samples, 30.75%)</title><rect x="40.5752%" y="469" width="30.7463%" height="15" fill="rgb(241,35,35)" fg:x="40266" fg:w="30512"/><text x="40.8252%" y="479.50">do_spin</text></g><g><title>cpu_relax (29,798 samples, 30.03%)</title><rect x="41.2947%" y="453" width="30.0268%" height="15" fill="rgb(243,32,47)" fg:x="40980" fg:w="29798"/><text x="41.5447%" y="463.50">cpu_relax</text></g><g><title>gomp_simple_barrier_wait (30,608 samples, 30.84%)</title><rect x="40.5661%" y="517" width="30.8430%" height="15" fill="rgb(247,202,23)" fg:x="40257" fg:w="30608"/><text x="40.8161%" y="527.50">gomp_simple_barrier_wait</text></g><g><title>gomp_barrier_wait_end (30,601 samples, 30.84%)</title><rect x="40.5732%" y="501" width="30.8360%" height="15" fill="rgb(219,102,11)" fg:x="40264" fg:w="30601"/><text x="40.8232%" y="511.50">gomp_barrier_wait_end</text></g><g><title>do_wait (30,599 samples, 30.83%)</title><rect x="40.5752%" y="485" width="30.8340%" height="15" fill="rgb(243,110,44)" fg:x="40266" fg:w="30599"/><text x="40.8252%" y="495.50">do_wait</text></g><g><title>futex_wait (87 samples, 0.09%)</title><rect x="71.3215%" y="469" width="0.0877%" height="15" fill="rgb(222,74,54)" fg:x="70778" fg:w="87"/><text x="71.5715%" y="479.50"></text></g><g><title>do_spin (11,757 samples, 11.85%)</title><rect x="71.4091%" y="485" width="11.8473%" height="15" fill="rgb(216,99,12)" fg:x="70865" fg:w="11757"/><text x="71.6591%" y="495.50">do_spin</text></g><g><title>cpu_relax (11,560 samples, 11.65%)</title><rect x="71.6077%" y="469" width="11.6488%" height="15" fill="rgb(226,22,26)" fg:x="71062" fg:w="11560"/><text x="71.8577%" y="479.50">cpu_relax</text></g><g><title>__GI___clone (52,132 samples, 52.53%)</title><rect x="30.7342%" y="565" width="52.5323%" height="15" fill="rgb(217,163,10)" fg:x="30500" fg:w="52132"/><text x="30.9842%" y="575.50">__GI___clone</text></g><g><title>start_thread (48,703 samples, 49.08%)</title><rect x="34.1895%" y="549" width="49.0770%" height="15" fill="rgb(213,25,53)" fg:x="33929" fg:w="48703"/><text x="34.4395%" y="559.50">start_thread</text></g><g><title>gomp_thread_start (48,199 samples, 48.57%)</title><rect x="34.6974%" y="533" width="48.5691%" height="15" fill="rgb(252,105,26)" fg:x="34433" fg:w="48199"/><text x="34.9474%" y="543.50">gomp_thread_start</text></g><g><title>gomp_team_barrier_wait_end (11,767 samples, 11.86%)</title><rect x="71.4091%" y="517" width="11.8574%" height="15" fill="rgb(220,39,43)" fg:x="70865" fg:w="11767"/><text x="71.6591%" y="527.50">gomp_team_barrier_..</text></g><g><title>do_wait (11,767 samples, 11.86%)</title><rect x="71.4091%" y="501" width="11.8574%" height="15" fill="rgb(229,68,48)" fg:x="70865" fg:w="11767"/><text x="71.6591%" y="511.50">do_wait</text></g><g><title>futex_wait (10 samples, 0.01%)</title><rect x="83.2564%" y="485" width="0.0101%" height="15" fill="rgb(252,8,32)" fg:x="82622" fg:w="10"/><text x="83.5064%" y="495.50"></text></g><g><title>_dl_cache_libcmp (11 samples, 0.01%)</title><rect x="83.3562%" y="405" width="0.0111%" height="15" fill="rgb(223,20,43)" fg:x="82721" fg:w="11"/><text x="83.6062%" y="415.50"></text></g><g><title>_dl_load_cache_lookup (18 samples, 0.02%)</title><rect x="83.3501%" y="437" width="0.0181%" height="15" fill="rgb(229,81,49)" fg:x="82715" fg:w="18"/><text x="83.6001%" y="447.50"></text></g><g><title>search_cache (15 samples, 0.02%)</title><rect x="83.3532%" y="421" width="0.0151%" height="15" fill="rgb(236,28,36)" fg:x="82718" fg:w="15"/><text x="83.6032%" y="431.50"></text></g><g><title>memset (11 samples, 0.01%)</title><rect x="83.4096%" y="421" width="0.0111%" height="15" fill="rgb(249,185,26)" fg:x="82774" fg:w="11"/><text x="83.6596%" y="431.50"></text></g><g><title>_dl_map_object_from_fd (53 samples, 0.05%)</title><rect x="83.3683%" y="437" width="0.0534%" height="15" fill="rgb(249,174,33)" fg:x="82733" fg:w="53"/><text x="83.6183%" y="447.50"></text></g><g><title>_dl_name_match_p (24 samples, 0.02%)</title><rect x="83.4217%" y="437" width="0.0242%" height="15" fill="rgb(233,201,37)" fg:x="82786" fg:w="24"/><text x="83.6717%" y="447.50"></text></g><g><title>strcmp (19 samples, 0.02%)</title><rect x="83.4267%" y="421" width="0.0191%" height="15" fill="rgb(221,78,26)" fg:x="82791" fg:w="19"/><text x="83.6767%" y="431.50"></text></g><g><title>_dl_catch_exception (129 samples, 0.13%)</title><rect x="83.3380%" y="485" width="0.1300%" height="15" fill="rgb(250,127,30)" fg:x="82703" fg:w="129"/><text x="83.5880%" y="495.50"></text></g><g><title>openaux (128 samples, 0.13%)</title><rect x="83.3390%" y="469" width="0.1290%" height="15" fill="rgb(230,49,44)" fg:x="82704" fg:w="128"/><text x="83.5890%" y="479.50"></text></g><g><title>_dl_map_object (128 samples, 0.13%)</title><rect x="83.3390%" y="453" width="0.1290%" height="15" fill="rgb(229,67,23)" fg:x="82704" fg:w="128"/><text x="83.5890%" y="463.50"></text></g><g><title>strcmp (15 samples, 0.02%)</title><rect x="83.4529%" y="437" width="0.0151%" height="15" fill="rgb(249,83,47)" fg:x="82817" fg:w="15"/><text x="83.7029%" y="447.50"></text></g><g><title>_dl_map_object_deps (145 samples, 0.15%)</title><rect x="83.3320%" y="501" width="0.1461%" height="15" fill="rgb(215,43,3)" fg:x="82697" fg:w="145"/><text x="83.5820%" y="511.50"></text></g><g><title>_dl_receive_error (12 samples, 0.01%)</title><rect x="83.4781%" y="501" width="0.0121%" height="15" fill="rgb(238,154,13)" fg:x="82842" fg:w="12"/><text x="83.7281%" y="511.50"></text></g><g><title>version_check_doit (12 samples, 0.01%)</title><rect x="83.4781%" y="485" width="0.0121%" height="15" fill="rgb(219,56,2)" fg:x="82842" fg:w="12"/><text x="83.7281%" y="495.50"></text></g><g><title>_dl_check_all_versions (12 samples, 0.01%)</title><rect x="83.4781%" y="469" width="0.0121%" height="15" fill="rgb(233,0,4)" fg:x="82842" fg:w="12"/><text x="83.7281%" y="479.50"></text></g><g><title>_dl_check_map_versions (12 samples, 0.01%)</title><rect x="83.4781%" y="453" width="0.0121%" height="15" fill="rgb(235,30,7)" fg:x="82842" fg:w="12"/><text x="83.7281%" y="463.50"></text></g><g><title>check_match (104 samples, 0.10%)</title><rect x="84.4888%" y="453" width="0.1048%" height="15" fill="rgb(250,79,13)" fg:x="83845" fg:w="104"/><text x="84.7388%" y="463.50"></text></g><g><title>strcmp (56 samples, 0.06%)</title><rect x="84.5372%" y="437" width="0.0564%" height="15" fill="rgb(211,146,34)" fg:x="83893" fg:w="56"/><text x="84.7872%" y="447.50"></text></g><g><title>_dl_lookup_symbol_x (974 samples, 0.98%)</title><rect x="83.6141%" y="485" width="0.9815%" height="15" fill="rgb(228,22,38)" fg:x="82977" fg:w="974"/><text x="83.8641%" y="495.50"></text></g><g><title>do_lookup_x (838 samples, 0.84%)</title><rect x="83.7512%" y="469" width="0.8444%" height="15" fill="rgb(235,168,5)" fg:x="83113" fg:w="838"/><text x="84.0012%" y="479.50"></text></g><g><title>dl_main (1,260 samples, 1.27%)</title><rect x="83.3270%" y="517" width="1.2697%" height="15" fill="rgb(221,155,16)" fg:x="82692" fg:w="1260"/><text x="83.5770%" y="527.50"></text></g><g><title>_dl_relocate_object (1,098 samples, 1.11%)</title><rect x="83.4902%" y="501" width="1.1064%" height="15" fill="rgb(215,215,53)" fg:x="82854" fg:w="1098"/><text x="83.7402%" y="511.50"></text></g><g><title>_start (1,312 samples, 1.32%)</title><rect x="83.2796%" y="565" width="1.3221%" height="15" fill="rgb(223,4,10)" fg:x="82645" fg:w="1312"/><text x="83.5296%" y="575.50"></text></g><g><title>_dl_start (1,272 samples, 1.28%)</title><rect x="83.3199%" y="549" width="1.2818%" height="15" fill="rgb(234,103,6)" fg:x="82685" fg:w="1272"/><text x="83.5699%" y="559.50"></text></g><g><title>_dl_sysdep_start (1,272 samples, 1.28%)</title><rect x="83.3199%" y="533" width="1.2818%" height="15" fill="rgb(227,97,0)" fg:x="82685" fg:w="1272"/><text x="83.5699%" y="543.50"></text></g><g><title>convert (83,958 samples, 84.60%)</title><rect x="0.0000%" y="581" width="84.6027%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="83958"/><text x="0.2500%" y="591.50">convert</text></g><g><title>[[heap]] (38 samples, 0.04%)</title><rect x="84.6127%" y="565" width="0.0383%" height="15" fill="rgb(228,201,54)" fg:x="83968" fg:w="38"/><text x="84.8627%" y="575.50"></text></g><g><title>curves_rs::graphics::display::Canvas::save_extension (38 samples, 0.04%)</title><rect x="84.6127%" y="549" width="0.0383%" height="15" fill="rgb(222,22,37)" fg:x="83968" fg:w="38"/><text x="84.8627%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (38 samples, 0.04%)</title><rect x="84.6127%" y="533" width="0.0383%" height="15" fill="rgb(237,53,32)" fg:x="83968" fg:w="38"/><text x="84.8627%" y="543.50"></text></g><g><title>curves_rs::graphics::display::Canvas::save_extension::{{closure}} (38 samples, 0.04%)</title><rect x="84.6127%" y="517" width="0.0383%" height="15" fill="rgb(233,25,53)" fg:x="83968" fg:w="38"/><text x="84.8627%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,590 samples, 1.60%)</title><rect x="84.6510%" y="549" width="1.6022%" height="15" fill="rgb(210,40,34)" fg:x="84006" fg:w="1590"/><text x="84.9010%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (302 samples, 0.30%)</title><rect x="85.9489%" y="533" width="0.3043%" height="15" fill="rgb(241,220,44)" fg:x="85294" fg:w="302"/><text x="86.1989%" y="543.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (302 samples, 0.30%)</title><rect x="85.9489%" y="517" width="0.3043%" height="15" fill="rgb(235,28,35)" fg:x="85294" fg:w="302"/><text x="86.1989%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (302 samples, 0.30%)</title><rect x="85.9489%" y="501" width="0.3043%" height="15" fill="rgb(210,56,17)" fg:x="85294" fg:w="302"/><text x="86.1989%" y="511.50"></text></g><g><title>core::fmt::Formatter::pad_integral (793 samples, 0.80%)</title><rect x="86.2563%" y="549" width="0.7991%" height="15" fill="rgb(224,130,29)" fg:x="85599" fg:w="793"/><text x="86.5063%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (105 samples, 0.11%)</title><rect x="87.0554%" y="549" width="0.1058%" height="15" fill="rgb(235,212,8)" fg:x="86392" fg:w="105"/><text x="87.3054%" y="559.50"></text></g><g><title>[[stack]] (2,625 samples, 2.65%)</title><rect x="84.6510%" y="565" width="2.6452%" height="15" fill="rgb(223,33,50)" fg:x="84006" fg:w="2625"/><text x="84.9010%" y="575.50">[[..</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (134 samples, 0.14%)</title><rect x="87.1612%" y="549" width="0.1350%" height="15" fill="rgb(219,149,13)" fg:x="86497" fg:w="134"/><text x="87.4112%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (65 samples, 0.07%)</title><rect x="87.3033%" y="549" width="0.0655%" height="15" fill="rgb(250,156,29)" fg:x="86638" fg:w="65"/><text x="87.5533%" y="559.50"></text></g><g><title>core::fmt::write (20 samples, 0.02%)</title><rect x="87.3687%" y="549" width="0.0202%" height="15" fill="rgb(216,193,19)" fg:x="86703" fg:w="20"/><text x="87.6187%" y="559.50"></text></g><g><title>[geass] (149 samples, 0.15%)</title><rect x="87.3033%" y="565" width="0.1501%" height="15" fill="rgb(216,135,14)" fg:x="86638" fg:w="149"/><text x="87.5533%" y="575.50"></text></g><g><title>std::io::Write::write_fmt (64 samples, 0.06%)</title><rect x="87.3889%" y="549" width="0.0645%" height="15" fill="rgb(241,47,5)" fg:x="86723" fg:w="64"/><text x="87.6389%" y="559.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (524 samples, 0.53%)</title><rect x="87.4544%" y="549" width="0.5280%" height="15" fill="rgb(233,42,35)" fg:x="86788" fg:w="524"/><text x="87.7044%" y="559.50"></text></g><g><title>core::fmt::write (205 samples, 0.21%)</title><rect x="87.9824%" y="533" width="0.2066%" height="15" fill="rgb(231,13,6)" fg:x="87312" fg:w="205"/><text x="88.2324%" y="543.50"></text></g><g><title>[geass] (224 samples, 0.23%)</title><rect x="87.9824%" y="549" width="0.2257%" height="15" fill="rgb(207,181,40)" fg:x="87312" fg:w="224"/><text x="88.2324%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (19 samples, 0.02%)</title><rect x="88.1890%" y="533" width="0.0191%" height="15" fill="rgb(254,173,49)" fg:x="87517" fg:w="19"/><text x="88.4390%" y="543.50"></text></g><g><title>__GI___dup2 (14 samples, 0.01%)</title><rect x="88.2807%" y="533" width="0.0141%" height="15" fill="rgb(221,1,38)" fg:x="87608" fg:w="14"/><text x="88.5307%" y="543.50"></text></g><g><title>__GI___libc_sigaction (32 samples, 0.03%)</title><rect x="88.2948%" y="533" width="0.0322%" height="15" fill="rgb(206,124,46)" fg:x="87622" fg:w="32"/><text x="88.5448%" y="543.50"></text></g><g><title>__execvpe_common (23 samples, 0.02%)</title><rect x="88.3271%" y="533" width="0.0232%" height="15" fill="rgb(249,21,11)" fg:x="87654" fg:w="23"/><text x="88.5771%" y="543.50"></text></g><g><title>__spawni_child (151 samples, 0.15%)</title><rect x="88.2092%" y="549" width="0.1522%" height="15" fill="rgb(222,201,40)" fg:x="87537" fg:w="151"/><text x="88.4592%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral (107 samples, 0.11%)</title><rect x="88.3664%" y="549" width="0.1078%" height="15" fill="rgb(235,61,29)" fg:x="87693" fg:w="107"/><text x="88.6164%" y="559.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (139 samples, 0.14%)</title><rect x="88.4742%" y="549" width="0.1401%" height="15" fill="rgb(219,207,3)" fg:x="87800" fg:w="139"/><text x="88.7242%" y="559.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (221 samples, 0.22%)</title><rect x="88.6142%" y="549" width="0.2227%" height="15" fill="rgb(222,56,46)" fg:x="87939" fg:w="221"/><text x="88.8642%" y="559.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (111 samples, 0.11%)</title><rect x="88.7251%" y="533" width="0.1119%" height="15" fill="rgb(239,76,54)" fg:x="88049" fg:w="111"/><text x="88.9751%" y="543.50"></text></g><g><title>core::fmt::write (207 samples, 0.21%)</title><rect x="88.8369%" y="549" width="0.2086%" height="15" fill="rgb(231,124,27)" fg:x="88160" fg:w="207"/><text x="89.0869%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (106 samples, 0.11%)</title><rect x="89.0465%" y="549" width="0.1068%" height="15" fill="rgb(249,195,6)" fg:x="88368" fg:w="106"/><text x="89.2965%" y="559.50"></text></g><g><title>[unknown] (1,693 samples, 1.71%)</title><rect x="87.4534%" y="565" width="1.7060%" height="15" fill="rgb(237,174,47)" fg:x="86787" fg:w="1693"/><text x="87.7034%" y="575.50"></text></g><g><title>__GI___clone (649 samples, 0.65%)</title><rect x="89.1594%" y="565" width="0.6540%" height="15" fill="rgb(206,201,31)" fg:x="88480" fg:w="649"/><text x="89.4094%" y="575.50"></text></g><g><title>&lt;curves_rs::graphics::display::Canvas as core::clone::Clone&gt;::clone (123 samples, 0.12%)</title><rect x="89.8184%" y="293" width="0.1239%" height="15" fill="rgb(231,57,52)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (123 samples, 0.12%)</title><rect x="89.8184%" y="277" width="0.1239%" height="15" fill="rgb(248,177,22)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (123 samples, 0.12%)</title><rect x="89.8184%" y="261" width="0.1239%" height="15" fill="rgb(215,211,37)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (123 samples, 0.12%)</title><rect x="89.8184%" y="245" width="0.1239%" height="15" fill="rgb(241,128,51)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (123 samples, 0.12%)</title><rect x="89.8184%" y="229" width="0.1239%" height="15" fill="rgb(227,165,31)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (123 samples, 0.12%)</title><rect x="89.8184%" y="213" width="0.1239%" height="15" fill="rgb(228,167,24)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (123 samples, 0.12%)</title><rect x="89.8184%" y="197" width="0.1239%" height="15" fill="rgb(228,143,12)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (123 samples, 0.12%)</title><rect x="89.8184%" y="181" width="0.1239%" height="15" fill="rgb(249,149,8)" fg:x="89134" fg:w="123"/><text x="90.0684%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="89.9484%" y="261" width="0.0131%" height="15" fill="rgb(243,35,44)" fg:x="89263" fg:w="13"/><text x="90.1984%" y="271.50"></text></g><g><title>[geass] (109 samples, 0.11%)</title><rect x="90.4885%" y="245" width="0.1098%" height="15" fill="rgb(246,89,9)" fg:x="89799" fg:w="109"/><text x="90.7385%" y="255.50"></text></g><g><title>std::io::Write::write_fmt (109 samples, 0.11%)</title><rect x="90.4885%" y="229" width="0.1098%" height="15" fill="rgb(233,213,13)" fg:x="89799" fg:w="109"/><text x="90.7385%" y="239.50"></text></g><g><title>core::fmt::Arguments::new_v1 (136 samples, 0.14%)</title><rect x="90.5984%" y="245" width="0.1370%" height="15" fill="rgb(233,141,41)" fg:x="89908" fg:w="136"/><text x="90.8484%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (35 samples, 0.04%)</title><rect x="90.7354%" y="245" width="0.0353%" height="15" fill="rgb(239,167,4)" fg:x="90044" fg:w="35"/><text x="90.9854%" y="255.50"></text></g><g><title>[geass] (443 samples, 0.45%)</title><rect x="92.1421%" y="229" width="0.4464%" height="15" fill="rgb(209,217,16)" fg:x="91440" fg:w="443"/><text x="92.3921%" y="239.50"></text></g><g><title>core::fmt::write (443 samples, 0.45%)</title><rect x="92.1421%" y="213" width="0.4464%" height="15" fill="rgb(219,88,35)" fg:x="91440" fg:w="443"/><text x="92.3921%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (394 samples, 0.40%)</title><rect x="93.1276%" y="213" width="0.3970%" height="15" fill="rgb(220,193,23)" fg:x="92418" fg:w="394"/><text x="93.3776%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (394 samples, 0.40%)</title><rect x="93.1276%" y="197" width="0.3970%" height="15" fill="rgb(230,90,52)" fg:x="92418" fg:w="394"/><text x="93.3776%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.01%)</title><rect x="93.6466%" y="197" width="0.0111%" height="15" fill="rgb(252,106,19)" fg:x="92933" fg:w="11"/><text x="93.8966%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (210 samples, 0.21%)</title><rect x="93.6990%" y="181" width="0.2116%" height="15" fill="rgb(206,74,20)" fg:x="92985" fg:w="210"/><text x="93.9490%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (42 samples, 0.04%)</title><rect x="93.8683%" y="165" width="0.0423%" height="15" fill="rgb(230,138,44)" fg:x="93153" fg:w="42"/><text x="94.1183%" y="175.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (56 samples, 0.06%)</title><rect x="93.9106%" y="181" width="0.0564%" height="15" fill="rgb(235,182,43)" fg:x="93195" fg:w="56"/><text x="94.1606%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (56 samples, 0.06%)</title><rect x="93.9106%" y="165" width="0.0564%" height="15" fill="rgb(242,16,51)" fg:x="93195" fg:w="56"/><text x="94.1606%" y="175.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (55 samples, 0.06%)</title><rect x="93.9116%" y="149" width="0.0554%" height="15" fill="rgb(248,9,4)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="159.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (55 samples, 0.06%)</title><rect x="93.9116%" y="133" width="0.0554%" height="15" fill="rgb(210,31,22)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="143.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (55 samples, 0.06%)</title><rect x="93.9116%" y="117" width="0.0554%" height="15" fill="rgb(239,54,39)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="127.50"></text></g><g><title>std::sys::unix::pipe::AnonPipe::write (55 samples, 0.06%)</title><rect x="93.9116%" y="101" width="0.0554%" height="15" fill="rgb(230,99,41)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="111.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (55 samples, 0.06%)</title><rect x="93.9116%" y="85" width="0.0554%" height="15" fill="rgb(253,106,12)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="95.50"></text></g><g><title>__libc_write (55 samples, 0.06%)</title><rect x="93.9116%" y="69" width="0.0554%" height="15" fill="rgb(213,46,41)" fg:x="93196" fg:w="55"/><text x="94.1616%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (84 samples, 0.08%)</title><rect x="93.9701%" y="165" width="0.0846%" height="15" fill="rgb(215,133,35)" fg:x="93254" fg:w="84"/><text x="94.2201%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (700 samples, 0.71%)</title><rect x="94.0547%" y="165" width="0.7054%" height="15" fill="rgb(213,28,5)" fg:x="93338" fg:w="700"/><text x="94.3047%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (648 samples, 0.65%)</title><rect x="94.1071%" y="149" width="0.6530%" height="15" fill="rgb(215,77,49)" fg:x="93390" fg:w="648"/><text x="94.3571%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,297 samples, 1.31%)</title><rect x="93.5247%" y="213" width="1.3070%" height="15" fill="rgb(248,100,22)" fg:x="92812" fg:w="1297"/><text x="93.7747%" y="223.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,165 samples, 1.17%)</title><rect x="93.6577%" y="197" width="1.1739%" height="15" fill="rgb(208,67,9)" fg:x="92944" fg:w="1165"/><text x="93.9077%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (858 samples, 0.86%)</title><rect x="93.9670%" y="181" width="0.8646%" height="15" fill="rgb(219,133,21)" fg:x="93251" fg:w="858"/><text x="94.2170%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (71 samples, 0.07%)</title><rect x="94.7601%" y="165" width="0.0715%" height="15" fill="rgb(246,46,29)" fg:x="94038" fg:w="71"/><text x="95.0101%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (71 samples, 0.07%)</title><rect x="94.7601%" y="149" width="0.0715%" height="15" fill="rgb(246,185,52)" fg:x="94038" fg:w="71"/><text x="95.0101%" y="159.50"></text></g><g><title>core::fmt::Formatter::new (134 samples, 0.14%)</title><rect x="94.8316%" y="213" width="0.1350%" height="15" fill="rgb(252,136,11)" fg:x="94109" fg:w="134"/><text x="95.0816%" y="223.50"></text></g><g><title>&lt;u8 as core::fmt::num::DisplayInt&gt;::to_u64 (228 samples, 0.23%)</title><rect x="94.9717%" y="197" width="0.2298%" height="15" fill="rgb(219,138,53)" fg:x="94248" fg:w="228"/><text x="95.2217%" y="207.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (17 samples, 0.02%)</title><rect x="95.2014%" y="197" width="0.0171%" height="15" fill="rgb(211,51,23)" fg:x="94476" fg:w="17"/><text x="95.4514%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::spare_capacity (134 samples, 0.14%)</title><rect x="95.9683%" y="149" width="0.1350%" height="15" fill="rgb(247,221,28)" fg:x="95237" fg:w="134"/><text x="96.2183%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (53 samples, 0.05%)</title><rect x="96.0499%" y="133" width="0.0534%" height="15" fill="rgb(251,222,45)" fg:x="95318" fg:w="53"/><text x="96.2999%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (41 samples, 0.04%)</title><rect x="96.1033%" y="149" width="0.0413%" height="15" fill="rgb(217,162,53)" fg:x="95371" fg:w="41"/><text x="96.3533%" y="159.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (41 samples, 0.04%)</title><rect x="96.1033%" y="133" width="0.0413%" height="15" fill="rgb(229,93,14)" fg:x="95371" fg:w="41"/><text x="96.3533%" y="143.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write (37 samples, 0.04%)</title><rect x="96.1073%" y="117" width="0.0373%" height="15" fill="rgb(209,67,49)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="127.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (37 samples, 0.04%)</title><rect x="96.1073%" y="101" width="0.0373%" height="15" fill="rgb(213,87,29)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="111.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (37 samples, 0.04%)</title><rect x="96.1073%" y="85" width="0.0373%" height="15" fill="rgb(205,151,52)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="95.50"></text></g><g><title>std::sys::unix::pipe::AnonPipe::write (37 samples, 0.04%)</title><rect x="96.1073%" y="69" width="0.0373%" height="15" fill="rgb(253,215,39)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="79.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (37 samples, 0.04%)</title><rect x="96.1073%" y="53" width="0.0373%" height="15" fill="rgb(221,220,41)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="63.50"></text></g><g><title>__libc_write (37 samples, 0.04%)</title><rect x="96.1073%" y="37" width="0.0373%" height="15" fill="rgb(218,133,21)" fg:x="95375" fg:w="37"/><text x="96.3573%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (105 samples, 0.11%)</title><rect x="96.1446%" y="133" width="0.1058%" height="15" fill="rgb(221,193,43)" fg:x="95412" fg:w="105"/><text x="96.3946%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (895 samples, 0.90%)</title><rect x="96.2504%" y="133" width="0.9019%" height="15" fill="rgb(240,128,52)" fg:x="95517" fg:w="895"/><text x="96.5004%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (895 samples, 0.90%)</title><rect x="96.2504%" y="117" width="0.9019%" height="15" fill="rgb(253,114,12)" fg:x="95517" fg:w="895"/><text x="96.5004%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,476 samples, 1.49%)</title><rect x="95.7375%" y="181" width="1.4873%" height="15" fill="rgb(215,223,47)" fg:x="95008" fg:w="1476"/><text x="95.9875%" y="191.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1,336 samples, 1.35%)</title><rect x="95.8786%" y="165" width="1.3463%" height="15" fill="rgb(248,225,23)" fg:x="95148" fg:w="1336"/><text x="96.1286%" y="175.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (1,072 samples, 1.08%)</title><rect x="96.1446%" y="149" width="1.0802%" height="15" fill="rgb(250,108,0)" fg:x="95412" fg:w="1072"/><text x="96.3946%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (72 samples, 0.07%)</title><rect x="97.1523%" y="133" width="0.0726%" height="15" fill="rgb(228,208,7)" fg:x="96412" fg:w="72"/><text x="97.4023%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (72 samples, 0.07%)</title><rect x="97.1523%" y="117" width="0.0726%" height="15" fill="rgb(244,45,10)" fg:x="96412" fg:w="72"/><text x="97.4023%" y="127.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (307 samples, 0.31%)</title><rect x="98.5439%" y="165" width="0.3094%" height="15" fill="rgb(207,125,25)" fg:x="97793" fg:w="307"/><text x="98.7939%" y="175.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1,700 samples, 1.71%)</title><rect x="97.2249%" y="181" width="1.7131%" height="15" fill="rgb(210,195,18)" fg:x="96484" fg:w="1700"/><text x="97.4749%" y="191.50"></text></g><g><title>core::fmt::Formatter::sign_plus (84 samples, 0.08%)</title><rect x="98.8533%" y="165" width="0.0846%" height="15" fill="rgb(249,80,12)" fg:x="98100" fg:w="84"/><text x="99.1033%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (535 samples, 0.54%)</title><rect x="98.9379%" y="181" width="0.5391%" height="15" fill="rgb(221,65,9)" fg:x="98184" fg:w="535"/><text x="99.1879%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (4,583 samples, 4.62%)</title><rect x="94.9666%" y="213" width="4.6182%" height="15" fill="rgb(235,49,36)" fg:x="94243" fg:w="4583"/><text x="95.2166%" y="223.50">core:..</text></g><g><title>core::fmt::num::imp::fmt_u64 (4,333 samples, 4.37%)</title><rect x="95.2186%" y="197" width="4.3663%" height="15" fill="rgb(225,32,20)" fg:x="94493" fg:w="4333"/><text x="95.4686%" y="207.50">core:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (102 samples, 0.10%)</title><rect x="99.4821%" y="181" width="0.1028%" height="15" fill="rgb(215,141,46)" fg:x="98724" fg:w="102"/><text x="99.7321%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (159 samples, 0.16%)</title><rect x="99.5848%" y="213" width="0.1602%" height="15" fill="rgb(250,160,47)" fg:x="98826" fg:w="159"/><text x="99.8348%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (159 samples, 0.16%)</title><rect x="99.5848%" y="197" width="0.1602%" height="15" fill="rgb(216,222,40)" fg:x="98826" fg:w="159"/><text x="99.8348%" y="207.50"></text></g><g><title>core::fmt::write (7,123 samples, 7.18%)</title><rect x="92.5885%" y="229" width="7.1777%" height="15" fill="rgb(234,217,39)" fg:x="91883" fg:w="7123"/><text x="92.8385%" y="239.50">core::fmt:..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (21 samples, 0.02%)</title><rect x="99.7451%" y="213" width="0.0212%" height="15" fill="rgb(207,178,40)" fg:x="98985" fg:w="21"/><text x="99.9951%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (9,783 samples, 9.86%)</title><rect x="89.9484%" y="277" width="9.8581%" height="15" fill="rgb(221,136,13)" fg:x="89263" fg:w="9783"/><text x="90.1984%" y="287.50">&lt;core::slice::..</text></g><g><title>curves_rs::graphics::display::Canvas::save_extension::{{closure}} (9,770 samples, 9.85%)</title><rect x="89.9615%" y="261" width="9.8450%" height="15" fill="rgb(249,199,10)" fg:x="89276" fg:w="9770"/><text x="90.2115%" y="271.50">curves_rs::gra..</text></g><g><title>std::io::Write::write_fmt (8,967 samples, 9.04%)</title><rect x="90.7707%" y="245" width="9.0359%" height="15" fill="rgb(249,222,13)" fg:x="90079" fg:w="8967"/><text x="91.0207%" y="255.50">std::io::Writ..</text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (40 samples, 0.04%)</title><rect x="99.7662%" y="229" width="0.0403%" height="15" fill="rgb(244,185,38)" fg:x="99006" fg:w="40"/><text x="100.0162%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::process::Child&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="277" width="0.0212%" height="15" fill="rgb(236,202,9)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;std::process::ChildStdin&gt;&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="261" width="0.0212%" height="15" fill="rgb(250,229,37)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::process::ChildStdin&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="245" width="0.0212%" height="15" fill="rgb(206,174,23)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::pipe::AnonPipe&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="229" width="0.0212%" height="15" fill="rgb(211,33,43)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::fd::FileDesc&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="213" width="0.0212%" height="15" fill="rgb(245,58,50)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (21 samples, 0.02%)</title><rect x="99.8065%" y="197" width="0.0212%" height="15" fill="rgb(244,68,36)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="207.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="99.8065%" y="181" width="0.0212%" height="15" fill="rgb(232,229,15)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="191.50"></text></g><g><title>__libc_close (21 samples, 0.02%)</title><rect x="99.8065%" y="165" width="0.0212%" height="15" fill="rgb(254,30,23)" fg:x="99046" fg:w="21"/><text x="100.0565%" y="175.50"></text></g><g><title>curves_rs::graphics::display::Canvas::save_extension (9,813 samples, 9.89%)</title><rect x="89.9484%" y="293" width="9.8883%" height="15" fill="rgb(235,160,14)" fg:x="89263" fg:w="9813"/><text x="90.1984%" y="303.50">curves_rs::gra..</text></g><g><title>__libc_start_main (9,948 samples, 10.02%)</title><rect x="89.8184%" y="549" width="10.0244%" height="15" fill="rgb(212,155,44)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="559.50">__libc_start_m..</text></g><g><title>main (9,948 samples, 10.02%)</title><rect x="89.8184%" y="533" width="10.0244%" height="15" fill="rgb(226,2,50)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (9,948 samples, 10.02%)</title><rect x="89.8184%" y="517" width="10.0244%" height="15" fill="rgb(234,177,6)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="527.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (9,948 samples, 10.02%)</title><rect x="89.8184%" y="501" width="10.0244%" height="15" fill="rgb(217,24,9)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="511.50">std::panic::ca..</text></g><g><title>std::panicking::try (9,948 samples, 10.02%)</title><rect x="89.8184%" y="485" width="10.0244%" height="15" fill="rgb(220,13,46)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="495.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (9,948 samples, 10.02%)</title><rect x="89.8184%" y="469" width="10.0244%" height="15" fill="rgb(239,221,27)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="479.50">std::panicking..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (9,948 samples, 10.02%)</title><rect x="89.8184%" y="453" width="10.0244%" height="15" fill="rgb(222,198,25)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="463.50">std::rt::lang_..</text></g><g><title>std::panic::catch_unwind (9,948 samples, 10.02%)</title><rect x="89.8184%" y="437" width="10.0244%" height="15" fill="rgb(211,99,13)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="447.50">std::panic::ca..</text></g><g><title>std::panicking::try (9,948 samples, 10.02%)</title><rect x="89.8184%" y="421" width="10.0244%" height="15" fill="rgb(232,111,31)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="431.50">std::panicking..</text></g><g><title>std::panicking::try::do_call (9,948 samples, 10.02%)</title><rect x="89.8184%" y="405" width="10.0244%" height="15" fill="rgb(245,82,37)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="415.50">std::panicking..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,948 samples, 10.02%)</title><rect x="89.8184%" y="389" width="10.0244%" height="15" fill="rgb(227,149,46)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="399.50">core::ops::fun..</text></g><g><title>std::rt::lang_start::{{closure}} (9,948 samples, 10.02%)</title><rect x="89.8184%" y="373" width="10.0244%" height="15" fill="rgb(218,36,50)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="383.50">std::rt::lang_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,948 samples, 10.02%)</title><rect x="89.8184%" y="357" width="10.0244%" height="15" fill="rgb(226,80,48)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="367.50">std::sys_commo..</text></g><g><title>core::ops::function::FnOnce::call_once (9,948 samples, 10.02%)</title><rect x="89.8184%" y="341" width="10.0244%" height="15" fill="rgb(238,224,15)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="351.50">core::ops::fun..</text></g><g><title>geass::main (9,948 samples, 10.02%)</title><rect x="89.8184%" y="325" width="10.0244%" height="15" fill="rgb(241,136,10)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="335.50">geass::main</text></g><g><title>geass::geass (9,948 samples, 10.02%)</title><rect x="89.8184%" y="309" width="10.0244%" height="15" fill="rgb(208,32,45)" fg:x="89134" fg:w="9948"/><text x="90.0684%" y="319.50">geass::geass</text></g><g><title>_start (9,954 samples, 10.03%)</title><rect x="89.8134%" y="565" width="10.0304%" height="15" fill="rgb(207,135,9)" fg:x="89129" fg:w="9954"/><text x="90.0634%" y="575.50">_start</text></g><g><title>all (99,238 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="99238"/><text x="0.2500%" y="607.50"></text></g><g><title>geass (15,280 samples, 15.40%)</title><rect x="84.6027%" y="581" width="15.3973%" height="15" fill="rgb(245,177,15)" fg:x="83958" fg:w="15280"/><text x="84.8527%" y="591.50">geass</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (155 samples, 0.16%)</title><rect x="99.8438%" y="565" width="0.1562%" height="15" fill="rgb(206,64,50)" fg:x="99083" fg:w="155"/><text x="100.0938%" y="575.50"></text></g></svg></svg>